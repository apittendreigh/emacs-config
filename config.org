
* Which-key
** Install and configure which-key to display keyboard help 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC
* Beacon
** Install and configure beacon to highlight cursor position when changing buffers
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1))
#+END_SRC
* Org
** Basic configuration of org mode
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** Install and configure org-bullets to pretty up org-mode outline
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* IDO
** Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO Vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Set up smex 
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize))
#+END_SRC
** Switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Buffers
** Enable ibuffers to overcome some weired defaults in dealing with buffer lists
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** Setup expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
* Avy
** Install and configure avy package to allow quick jumping in buffer
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
* Rainbow
** Install and config rainbow-mode that colourises colour names
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Install and configure rainbow-delimiters that highlights matching parenthesis etc
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hookd #'rainbow-delimiters-mode)
    (rainbow-delimiters-mode 1))
#+END_SRC
* Switch-window
** Install and configure the switch-window management package
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increasew 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind ([remap other-window] . switch-window))
#+END_SRC
* Hungry-delete
** Install and configure hungry delete to handle multiple whitespacing
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
* Sudo-edit
** Install sudo-edit to allow editing of protected files
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
* Dashboard
** Install and configure dashboard to make a better Emacs starting experience
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Welcome to the world of Emacs!"))
#+END_SRC
* Mode line
** Install and configure the spaceline modeline package (prettier than std)
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** Install and configure the diminish package to reduce clutter on modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'company-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'which-key-mode))
#+END_SRC
* Symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind ("M-s-h" . 'symon-mode))
#+END_SRC
* Popup-kill-ring
** Install and configure popup-kill-ring to display menu for easier access to the kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Swiper
** Install and configure swiper, an advanced search system
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	       :ensure t
	       :bind ("C-s" . swiper))
#+END_SRC
* Mark-multiple
** Install and configure mark-multiple, a better way to mark mutiple regions
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+End_SRC
* Expand-region
** Install and configure expand-region to allow quick and easy expansion of marked regions
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* Pretty Symbols
** Install and configure pretty-mode to change =lambda= and others to a symbol in GUI mode only
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config (global-pretty-mode t)))
#+END_SRC
* Convenient user functions
** Window splitting functions
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
** Kill whole word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
#+END_SRC
** Edit the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
** Reload the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC

** Always kill correct buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

** Copy the whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
#+END_SRC
** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
#+END_SRC
* Environment
** Set up emacs to a clean initial environment
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (display-time-mode 1)
  (setq inhibit-startup-message t)
  (setq column-number-mode t)
  (setq line-number-mode t)
  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  (setq global-subword-mode t)
#+END_SRC
** Set up electric mode for auto completion of brackets, parenthesis
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\< . ?\>)))
  (electric-pair-mode t)
#+END_SRC
** Setup the initial frame size and position on the screen
#+BEGIN_SRC emacs-lisp
  (set-frame-position (selected-frame) 50 50)
  (setq initial-frame-alist
	'(
	  (width . 142) ; character
	  (height . 47) ; lines
	  ))
  (setq default-frame-alist
	'(
	  (width . 140) ; character
	  (height . 450) ; lines
	  ))
#+END_SRC
** Setting inbuilt shell to zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
**  Setup global keyboard remapping
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-c e") 'config-visit)
  (global-set-key (kbd "C-c r") 'config-reload)
  (global-set-key (kbd "s-<return>") 'ansi-term)
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
  (global-set-key (kbd "C-C k a") 'kill-all-buffers)
#+END_SRC
