* Terminal
** Setting inbuilt shell to zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
* Which-key
** Install and configure which-key to display keyboard help 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC
* Beacon
** Install and configure beacon to highlight cursor position when changing buffers
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1))
#+END_SRC
* Org-bullets
** Install and configure org-bullets to pretty up org-mode outline
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* IDO
** Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO Vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Set up smex 
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize))
#+END_SRC
** Switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Buffers
** Enable ibuffers to overcome some weired defaults in dealing with buffer lists
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** Setup expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
* Configuration Edit/Reload
** Edit the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
#+END_SRC
** Reload the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
#+END_SRC
* Rainbow
** Install and config rainbow-mode that colourises colour names
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
	    (add-hook hook 'rainbow-mode)))
#+END_SRC
* Switch-window
** Install and configure the switch-window management package
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increasew 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind ([remap other-window] . switch-window))
#+END_SRC
* Window splitting custom functions
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
* Environment
** Set up emacs to a clean initial environment
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq column-number-mode t)
  (setq scroll-conservatively 100)
  (setq ring-bell-function 'ignore)
  (when window-system (global-hl-line-mode t))
  (when window-system (global-prettify-symbols-mode t))
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC
** Setup the initial frame size and position on the screen
#+BEGIN_SRC emacs-lisp
  (set-frame-position (selected-frame) 50 50)
  (setq initial-frame-alist
	'(
	  (width . 142) ; character
	  (height . 47) ; lines
	  ))
  (setq default-frame-alist
	'(
	  (width . 140) ; character
	  (height . 450) ; lines
	  ))
#+END_SRC

** Setup global keyboard remapping
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-c e") 'config-visit)
  (global-set-key (kbd "C-c r") 'config-reload)
  (global-set-key (kbd "s-<return>") 'ansi-term)
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
